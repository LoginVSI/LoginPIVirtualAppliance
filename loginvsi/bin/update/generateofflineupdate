#!/bin/bash
share="$1"
uploadpath="$2"
username="$3"
password="$4"
domain="$5"
if [ -z $share ]; then
        read -rep "Please provide the sharename (e.g. \\\\server\\share, don't include subfolder): " share
        read -rep "Please provide subfolder of share to upload the iso to (in linux format using / ): " uploadpath
fi 
if [ -z $username ]; then
        read -rep "Please provide username to authenticate with $share: " username
fi 
if [ -z $password ]; then 
        read -reps "Please provide the password for $username: " password 
fi
if [ -z $domain ]; then
        read -rep "Please provide domainname for $username: " domain
fi 

echo "###############################################################"
echo "#             Offline update generator                        #"
echo "###############################################################"
echo "$(date) Installing prereqs"
apt-get install -y genisoimage &>/dev/null
#rm -rf /tmp/awscli-bundle* 
#curl -s "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "/tmp/awscli-bundle.zip"
#cd /tmp
#unzip awscli-bundle.zip &>/dev/null
#/tmp/awscli-bundle/install -b ~/bin/aws &>/dev/null
#rm -rf /tmp/awscli-bundle* 

composefilepath=$(grep "COMPOSEFILE=" < /loginvsi/.env | cut -d "=" -f2)
version=$(grep "Version__Number" < $composefilepath | cut -d':' -f2 | cut -d"'" -f2 | tail -1)
rm -rf /tmp/$version
mkdir -p /tmp/$version

echo "$(date) Starting local registry"
docker rm -f $(docker ps --filter name=update_registry -q) &>/dev/null
docker rmi registry:2 &>/dev/null
mkdir /tmp/$version/registry_data
docker run -v /tmp/$version/registry_data:/var/lib/registry -d -p 55555:5000 --name update_registry registry:2 &>/dev/null

echo "$(date) Archiving Docker images"
# tar the docker images
for image in $(docker image ls --format "{{.Repository}}:{{.Tag}}" | grep -v registry:2);do
    #docker image save -o $(echo /tmp/$version/images/$(echo $image | sed 's,/,@,g')) $image
    docker image tag $image localhost:55555/$image &>/dev/null
    docker image push localhost:55555/$image &>/dev/null
    [[ $image == loginvsi/* ]] && name="LoginPI3"
    [[ $image == loginvsi2/* ]] && name="LoginAT"
done
echo "$(date) Exporting local registry"
docker container export update_registry | gzip > /tmp/$version/registry.tar.gz 
cd /tmp/$version/registry_data
tar -zcf /tmp/$version/registry_data.tar.gz docker

rm -rf /tmp/$version/registry_data
echo "$(date) Cloning git repos"
cd /tmp/$version
cat /root/.hosting | while read -r repo branch hostingfolder; do
        git clone -q -b "$branch" "$repo" hosting;        
done;
git clone -q https://github.com/LoginVSI/LoginPIVirtualAppliance.git update

rm -rf /tmp/$version/*/.git

isopath="/tmp/$name-$version.iso"
echo "$(date) Generating ISO"
genisoimage -quiet -joliet -joliet-long -o $isopath /tmp/$version


# Upload update iso path specified
if [ -d /mnt/cifs ]; then
        rm -rf /mnt/cifs
fi
mkdir /mnt/cifs
mount -t cifs -o user=$username,domain=$domain,pass=$password $share /mnt/cifs

isotargetpath="/mnt/cifs/$uploadpath/$name-$version.iso"
cp -f $isopath $isotargetpath


#url="s3://loginvsidata/Virtual Appliance updates/$(echo $isopath |cut -d'/' -f3)"
#echo "$(date) Uploading $isopath to $url"
#/root/bin/aws s3 cp $isopath "$url"
#/root/bin/aws s3api put-object-acl --bucket loginvsidata --key "Virtual Appliance updates/$(echo $isopath |cut -d'/' -f3)" --acl public-read

echo "Done!"
echo "###############################################################"
echo " $share\\$uploadpath\\$name-$version.iso"
echo "###############################################################"

#cleanup
umount /mnt/cifs
docker rmi $(docker image ls localhost:55555/* --format "{{.Repository}}:{{.Tag}}") &>/dev/null
docker rmi $(docker image ls localhost:55555/*/* --format "{{.Repository}}:{{.Tag}}") &>/dev/null
docker rm -f $(docker ps --filter name=update_registry -q) &>/dev/null
docker rmi registry:2 &>/dev/null
apt-get remove -y genisoimage &>/dev/null
rm -rf /tmp/$version

