#!/bin/bash
composefilepath="$1"
existingsecrets=$(docker secret ls --format "{{.Name}}")
composesecrets=""
secretsstartlinenumber=$(grep -n "^secrets:" $composefilepath | cut -d':' -f1)
servicesstartlinenumber=$(grep -n "^services:" $composefilepath | cut -d':' -f1)
OLDIFS=$IFS
IFS=$'\n'
for line in $(tail -n+$secretsstartlinenumber $composefilepath | head -n $(($servicesstartlinenumber-$secretsstartlinenumber)) | grep "^ "); do        
    if [[ -z $(echo $line | cut -d':' -f2) ]]; then 
        composesecrets+=$(echo $line | cut -d':' -f1 | xargs)
        composesecrets+=" "
    fi
done
IFS=$OLDIFS

for newsecret in $(echo $existingsecrets $composesecrets | tr ' ' '\n' | sort | uniq -u); do 
    case "$newsecret" in
        *_SSL_CERTIFICATE|*_SSL_CERTIFICATE_KEY) 
            # we only set SSL_cert related secrets during firstrun
            ;;
        LAUNCHER_SECRET)
            echo "Found new secret: $newsecret, creating it now..." 
            openssl rand -hex 40 | head -c 40 | tr [:lower:] [:upper:] | docker secret create LAUNCHER_SECRET - 
            ;; 
        ENGINE_SECRET)
            echo "Found new secret: $newsecret, creating it now..." 
            openssl rand -hex 40 | head -c 40 | tr [:lower:] [:upper:] | docker secret create ENGINE_SECRET - 
            ;; 
        EVENTLOGGER_SECRET)
                echo "Found new secret: $newsecret, creating it now..." 
            openssl rand -hex 40 | head -c 40 | tr [:lower:] [:upper:] | docker secret create EVENTLOGGER_SECRET - 
            ;;
        *) 
            echo "WARNING: Found new secret: $newsecret, but this script does not know how to handle it!" 
            ;;
    esac    
done